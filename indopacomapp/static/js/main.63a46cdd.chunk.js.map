{"version":3,"sources":["sidebar/List.js","utils/mapUtils.js","sidebar/MapView.js","sidebar/Sidebar.js","mainArea/LinkPanel.js","mainArea/Tabs.js","mainArea/MainArea.js","Modal.js","utils/portalUtils.js","App.js","serviceWorker.js","index.js"],"names":["List","currentCat","currentCategory","onCurrentCategoryChange","emptyListMessage","showFilterInList","useState","filterValue","setFilterValue","className","parent","getTitleRecursive","currentJSX","newString","inline","onClick","c","title","count","placeholder","value","onChange","evt","target","handleChange","tabIndex","categories","length","filter","category","toLowerCase","indexOf","map","i","SideNav","key","e","categoryClickHandler","getCurrentWhereClause","layerInfo","retWhereClause","nameAttribute","parentNameAttribute","updateLabels","doShow","layer","labelsVisible","labels","labelingInfo","where","MapView","portalUrl","webmapid","onCurrentCategoryChangeByName","layerInfosConfig","categoryDataByLevel","rootCategory","defaultExtent","setDefaultExtent","ref","useRef","layers","setLayers","layerViews","setLayerViews","highlight","setHighlight","mapView","setMapView","setLabels","useEffect","loadModules","then","WebMap","v","portalItem","id","portal","url","container","current","when","onUpdateChange","view","homeWidget","Home","ui","add","position","index","on","extent","clone","layerViewPromises","layerInfoConfig","find","layerTitle","whenLayerView","Promise","all","lvs","forEach","layerView","layersLoadedPromises","load","set","layerProperties","useEvent","hitTest","hitResponse","categoryName","levelFoundAt","previousLayerKey","results","hitResponseResult","graphic","attributes","foundCategory","cat","console","error","remove","lv","categoryLevel","split","resolve","reject","query","createQuery","queryFeatures","fs","features","feature","goTo","geometry","expand","warn","err","zoomAndHighlight","highlightRef","log","categoryInfo","l","expr","JSON","stringify","labelExpressionInfo","expression","Sidebar","webmap","transparent","href","aria-label","style","paddingRight","LinkPanel","currentUrl","textInput","Form","fullWidth","success","margin","clear","readonly","rightAdornmentNoWrap","rightAdornment","Button","select","document","execCommand","Tabs","currentContent","noPanelMessage","activeTabIndex","setActiveTabIndex","onTabChange","contentInfo","startsWith","src","MainArea","Modal","content","open","setOpen","useCookies","cookies","setCookie","closeModal","hasOwnProperty","onRequestClose","appElement","body","overlayStyle","actions","getGroupCategorySchema","groupId","a","request","params","f","res","categorySchema","getGroupCategoryCounts","countFields","countSize","_groupSearch","groupSearch","nextStart","allResults","Object","assign","start","concat","enrichCounts","categorySchemaCounts","parentCategory","categorySchemaCountInfo","schemaCountInfo","getCategorySchemaCounts","getInitialAppData","rootCategoryPathString","groupCategoryCounts","aggregations","counts","fieldValues","RootCategory","categoryPathStringToName","Error","categoryPathString","location","lastIndexOf","substr","_getItemSortOrder","item","orderCat","groupCategories","includes","Number","slice","App","application","applicationBase","categoryData","setCategoryData","setCategoryDataByLevel","setCurrentCategory","setCurrentContent","excludedItemTypes","excludedItemIDs","group","customConfig","num","queryResponse","groupCategoryItems","type","sort","b","resource","urlKey","customBaseUrl","groupContent","categoriesSortedByLevel","_categoryDataByLevel","levelsArray","getCategoriesAtLevelsRet","level","push","getCategoriesAtLevels","layerInfos","filterSections","join","sizes","minSize","expandToMin","gutterSize","direction","cursor","initialModalMessage","name","findCategory","result","Boolean","window","hostname","match","setDefaultOptions","css","fetch","responses","response","json","data","ReactDOM","render","Fragment","Helmet","charSet","getElementById","catch","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.63a46cdd.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport SideNav, { SideNavLink } from \"calcite-react/SideNav\";\nimport Panel from \"calcite-react/Panel\";\nimport Button from \"calcite-react/Button\";\nimport TextField from \"calcite-react/TextField\";\n\nexport default function List({\n  currentCategory,\n  onCurrentCategoryChange,\n  emptyListMessage,\n  showFilterInList,\n}) {\n  const [filterValue, setFilterValue] = useState(\"\");\n\n  function categoryClickHandler(e) {\n    if (e.parent.categories) {\n      setFilterValue(\"\");\n      onCurrentCategoryChange(e);\n    }\n  }\n\n  function parentClickHandler(c) {\n    if (c) {\n      onCurrentCategoryChange(c);\n    }\n  }\n\n  /**\n   * Get the title for the list component.\n   * @param {object} currentCat current category object\n   */\n  function getTitle(currentCat) {\n    if (currentCat.parent) {\n      return getTitleRecursive(\n        currentCat.parent,\n        <span className=\"currentTab\">\n          {currentCat.title} ({currentCat.count})\n        </span>\n      );\n    } else {\n      return (\n        <span className=\"currentTab\">\n          {currentCat.title} ({currentCat.count})\n        </span>\n      );\n    }\n  }\n\n  /**\n   * Recursively add the breadcrumbs of the title (\"Name > ____\")\n   * @param {object} currentCat current category object\n   * @param {jsx} currentNode the JSX node we're building up\n   */\n  function getTitleRecursive(currentCat, currentJSX) {\n    const newString = (\n      <span>\n        {/* Why button? https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md */}\n        <Button inline onClick={() => parentClickHandler(currentCat)}>\n          {currentCat.title}\n        </Button>{\" \"}\n        > {currentJSX}\n      </span>\n    );\n    if (currentCat.parent) {\n      return getTitleRecursive(currentCat.parent, newString);\n    } else {\n      return newString;\n    }\n  }\n\n  function handleChange(evt) {\n    setFilterValue(evt.target.value);\n  }\n\n  if (currentCategory) {\n    return (\n      <div className=\"List\">\n        <Panel className=\"Panel\">{getTitle(currentCategory)}</Panel>\n        {showFilterInList && (\n          <TextField\n            placeholder=\"Find ..\"\n            value={filterValue}\n            onChange={(evt) => {\n              handleChange(evt);\n            }}\n          />\n        )}\n\n        <SideNav className=\"SideNav\">\n          <nav tabIndex={0}>\n            {currentCategory.categories &&\n            currentCategory.categories.length > 0 ? (\n              currentCategory.categories\n                .filter((category) => {\n                  if (filterValue !== \"\") {\n                    return (\n                      category.count > 0 &&\n                      category.title\n                        .toLowerCase()\n                        .indexOf(filterValue.toLowerCase()) > -1\n                    );\n                  } else {\n                    return category.count > 0;\n                  }\n                })\n                .map((category, i) => {\n                  return (\n                    <SideNavLink\n                      key={i}\n                      onClick={(e) => categoryClickHandler(category, e)}\n                    >\n                      {category.title} ({category.count})\n                    </SideNavLink>\n                  );\n                })\n            ) : (\n              <SideNavLink>{emptyListMessage}</SideNavLink>\n            )}\n          </nav>\n        </SideNav>\n      </div>\n    );\n  } else {\n    return null;\n  }\n}\n","/**\n * Returns a where clause that the zoom and \"label\" functions use to\n * for what to show. This includes a filter for the current layer and also\n * the \"parent\" where applicable\n *\n * (example: \"clark\" county exists in multiple states so must add on the\n * state to the query to make sure we're filtering down to the CORRECT\n * clark county)\n *\n * @param {object} currentCategory Category in the category tree\n * @param {object} layerInfo layerInfo object (From application config)\n */\nconst getCurrentWhereClause = function (currentCategory, layerInfo) {\n  let retWhereClause = `${layerInfo.nameAttribute} = '${currentCategory.title}'`;\n\n  if (layerInfo.parentNameAttribute) {\n    retWhereClause = `${retWhereClause} AND ${layerInfo.parentNameAttribute} = '${currentCategory.parent.title}'`;\n  }\n\n  return retWhereClause;\n};\n\n/**\n * Zoom to feature and highlight. Returns handle to highlight (so you can remove)\n * @param {object} view - ArcGIS JS API MapView\n * @param {object} layerView - ArcGIS JS API Layerview\n * @param {object} layerInfo - from the \"application\" config\n * @param {object} currentCategory - reference to current category in the category tree.\n */\nconst zoomAndHighlight = function (\n  view,\n  layerView,\n  layerInfo,\n  currentCategory\n) {\n  return new Promise((resolve, reject) => {\n    const layer = layerView.layer;\n    const query = layer.createQuery();\n    query.set({\n      where: getCurrentWhereClause(currentCategory, layerInfo),\n    });\n    layer.queryFeatures(query).then(\n      (fs) => {\n        if (fs.features.length) {\n          const feature = fs.features[0];\n          view\n            .goTo({\n              target: feature.geometry.extent.clone().expand(1.2),\n            })\n            .then(() => {\n              resolve(layerView.highlight(feature));\n            });\n        } else {\n          console.warn(\"Invalid query or can't find feature: \");\n        }\n      },\n      (err) => {\n        reject(err);\n      }\n    );\n  });\n};\n\n/**\n * Used to enable to disable, and update the labels for a layer.\n * @param {boolean} doShow Used to show or hide the labels\n * @param {object} layer FeatureLayer object\n * @param {object} layerInfo from the \"application\" config\n * @param {object} currentCategory category object\n */\nconst updateLabels = function (doShow, layer, layerInfo, currentCategory) {\n  if (layer && doShow === false) {\n    layer.labelsVisible = false;\n  } else if (layer && layerInfo && currentCategory) {\n    const labels = layer.labelingInfo[0];\n    labels.where = getCurrentWhereClause(currentCategory, layerInfo);\n    layer.labelingInfo = [labels];\n    layer.labelsVisible = true;\n  }\n};\n\nexport { zoomAndHighlight, updateLabels };\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { useWebMap, useEvent, useWatch } from \"esri-loader-hooks\";\nimport { zoomAndHighlight, updateLabels } from \"../utils/mapUtils.js\";\nimport { loadModules } from \"esri-loader\";\n\nexport default function MapView({\n  portalUrl,\n  webmapid,\n  currentCategory,\n  onCurrentCategoryChangeByName,\n  layerInfosConfig,\n  categoryDataByLevel,\n  rootCategory\n}) {\n  // const [ref, view] = useWebMap({\n  //   portalItem: {\n  //     id: webmap,\n  //     portal: {\n  //       url: portalUrl\n  //     }\n  //   },\n  // }, {\n  //   view: {\n  //     constraints: {\n  //       snapToZoom: false,\n  //     },\n  //     highlightOptions: {\n  //       color: \"orange\",\n  //       fillOpacity: 0.1,\n  //       haloColor: \"orange\",\n  //       haloOpacity: 0.9,\n  //     },\n  //   },\n  // });\n  \n\n  const [defaultExtent, setDefaultExtent] = useState();\n\n  const ref = useRef();\n\n  const [layers, setLayers] = useState([]);\n  const [layerViews, setLayerViews] = useState([]);\n  const [highlight, setHighlight] = useState();\n  \n  const [mapView, setMapView] = useState(false);\n\n  const [labels, setLabels] = useState();\n\n\n  \n\n  useEffect(() => {\n    loadModules([\"esri/WebMap\", \"esri/views/MapView\"]).then(([WebMap, MapView]) => {\n      const webmap = new WebMap({\n        portalItem: {\n          // autocasts as new PortalItem()\n          id: webmapid,\n          portal: {\n            url: portalUrl\n          }\n        }\n      });\n\n      const v = new MapView({\n        map: webmap,\n        container: ref.current\n      });\n      v.when(() => {\n        onUpdateChange(v);\n        setMapView(v);\n      });\n    });\n  }, []);  // eslint-disable-line\n\n  const onUpdateChange = (view) => {\n    if (view) {\n      // VIEW IS READY - Do any setup here:\n      loadModules([\"esri/widgets/Home\"]).then(([Home]) => {\n        var homeWidget = new Home({\n          view: view,\n        });\n\n        // adds the home widget to the top left corner of the MapView\n        view.ui.add(homeWidget, {\n          position: \"top-left\",\n          index: 0,\n        });\n        homeWidget.on(\"go\", () => {\n          onCurrentCategoryChangeByName(`/Categories/INDOPACOM`);\n        });\n      });\n\n      // Save the default extent so we can use below.\n      setDefaultExtent(view.extent.clone());\n\n      const layerViewPromises = layerInfosConfig.map((layerInfoConfig) => {\n        const layer = view.map.layers.find((layer) => {\n          return layer.title === layerInfoConfig.layerTitle;\n        });\n        layerInfoConfig.layer = layer;\n        return view.whenLayerView(layer);\n      });\n\n      Promise.all(layerViewPromises).then((lvs) => {\n        setLayerViews(lvs);\n        lvs.forEach((layerView, i) => {\n          layerView.filter = {\n            where: layerInfosConfig[i].filter,\n          };\n        });\n\n        // Wait till all the layers load:\n        const layersLoadedPromises = lvs.map((layerView) => {\n          return layerView.layer.load();\n        });\n\n        // After all the layers load, set the layerProperties (From the config)\n        Promise.all(layersLoadedPromises).then((layers) => {\n          layers.forEach((layer, i) => {\n            layer.set(layerInfosConfig[i].layerProperties);\n          });\n          setLayers(layers);\n        });\n      });\n    }\n  };\n\n  \n  const onClick = (evt) => {\n    mapView.hitTest(evt).then((hitResponse) => {\n      let categoryName;\n      let levelFoundAt;\n      // loop through the layers, the last one to match (the most specific) will be used.\n      let previousLayerKey = rootCategory;\n      layerInfosConfig.forEach((layerInfo, i) => {\n        hitResponse.results.forEach((hitResponseResult) => {\n          if (hitResponseResult.graphic.layer.title === layerInfo.layerTitle) {\n            // matched! need to build up categoryName string:\n            categoryName =\n              hitResponseResult.graphic.attributes[layerInfo.nameAttribute];\n            if(previousLayerKey) {\n              categoryName = `${previousLayerKey}/${categoryName}`;\n              previousLayerKey = categoryName;\n            } else {\n              previousLayerKey = categoryName;\n            }\n            levelFoundAt = i;\n          }\n        });\n      });\n\n      // since we were looping through, we have the \"lowest level\" matching that we had clicked on\n      // now search through that \"level\" in the categories (categoryDataByLevel) and then build up the\n      // string based on that.\n      const foundCategory = categoryDataByLevel[levelFoundAt + 1].find(\n        (cat) => {\n          return cat.category === categoryName;\n        }\n      );\n\n      if (foundCategory) {\n        onCurrentCategoryChangeByName(foundCategory.category);\n      } else {\n        console.error(\"error, probably with data\", categoryName);\n      }\n    });\n  };\n  useEvent(mapView, \"click\", onClick);\n\n  // When the currentCategory changes (Either by click on the map OR\n  // click on the list), this function gets called.\n  useEffect(() => {\n    if (currentCategory && layerViews && layerViews.length > 0 && layers) {\n      if (highlight) {\n        highlight.remove();\n      }\n      const categoryParts = currentCategory.category.split(\"/\");\n      const categoryLevel = categoryParts.length - 4;\n\n      if (categoryLevel >= 0) {\n        let lv;\n        if (layerViews && layerViews.length > 0 && layerViews[categoryLevel]) {\n          lv = layerViews[categoryLevel];\n        } else {\n          console.error(\"PROBLEM - could not find layerView:\", layerViews);\n        }\n        if (lv) {\n          zoomAndHighlight(\n            mapView,\n            lv,\n            layerInfosConfig[categoryLevel],\n            currentCategory\n          ).then((highlightRef) => {\n            setHighlight(highlightRef);\n          });\n\n          if (categoryLevel === 1) {\n            // only show layer when zoomed into third level requirement - might need to change this when we make this more configurable??\n            updateLabels(\n              true,\n              lv.layer,\n              layerInfosConfig[categoryLevel],\n              currentCategory\n            );\n          } else {\n            updateLabels(false, layers[1]);\n          }\n        } else {\n          console.log(\"no layerView\");\n        }\n      } else {\n        // First level (USA)\n        if (mapView) {\n          mapView.goTo({\n            target: defaultExtent,\n          });\n        }\n\n        // remove the label on the third layer:\n        updateLabels(false, layers[1]);\n      }\n    }\n  }, [currentCategory, defaultExtent, highlight, layerInfosConfig, layerViews, layers, mapView]);\n\n  useEffect(() => {\n    // this effect will run any time the three variables changes, so we'll use the\n    // \"statesLabels\" state to make sure this only runs ONCE per pageload:\n    if (!labels && currentCategory && layers && layers.length > 0) {\n      const labels = {};\n      currentCategory.categories.forEach((categoryInfo) => {\n        labels[categoryInfo.title] = categoryInfo.count;\n      });\n\n      const layer = layers[0];\n      const l = layer.labelingInfo[0];\n      const expr = `var countLabelsByFeature = Dictionary('${JSON.stringify(\n        labels\n      )}'); if(hasKey(countLabelsByFeature, $feature.${\n        layerInfosConfig[0].nameAttribute\n      })) {return countLabelsByFeature[$feature.${\n        layerInfosConfig[0].nameAttribute\n      }];} else {return 0;}`;\n      l.labelExpressionInfo = {\n        expression: expr,\n      };\n      layer.labelingInfo = [l];\n\n      setLabels(l);\n    }\n  }, [currentCategory, labels, layerInfosConfig, layers]);\n\n  return (\n    <div className=\"Map\">\n      <div ref={ref} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport List from \"./List.js\";\nimport MapView from \"./MapView.js\";\nimport { CalciteH3 } from \"calcite-react/Elements\";\nimport SpeechBubblePlusIcon from \"calcite-ui-icons-react/SpeechBubblePlusIcon\";\nimport Button from \"calcite-react/Button\";\n\nexport default function Sidebar({\n  title,\n  portalUrl,\n  webmap,\n  currentCategory,\n  onCurrentCategoryChange,\n  onCurrentCategoryChangeByName,\n  layerInfosConfig,\n  categoryDataByLevel,\n  emptyListMessage,\n  showFilterInList,\n  rootCategory\n}) {\n  return (\n    <div className=\"Sidebar\">\n      <div className=\"SuggestLinkWrapper\">\n        <Button\n          transparent\n          href=\"https://www.esri.com/en-us/covid-19/community-maps/maps-apps\"\n          target=\"_blank\"\n          title=\"Suggest an idea for this Esri template\"\n          aria-label=\"Suggest an idea for this Esri template\"\n        >\n          <SpeechBubblePlusIcon />\n        </Button>\n      </div>\n      <CalciteH3 style={{ paddingRight: \"28px\" }}>{title}</CalciteH3>\n      <List\n        currentCategory={currentCategory}\n        onCurrentCategoryChange={onCurrentCategoryChange}\n        emptyListMessage={emptyListMessage}\n        showFilterInList={showFilterInList}\n      ></List>\n      <MapView\n        portalUrl={portalUrl}\n        webmapid={webmap}\n        currentCategory={currentCategory}\n        onCurrentCategoryChangeByName={onCurrentCategoryChangeByName}\n        layerInfosConfig={layerInfosConfig}\n        categoryDataByLevel={categoryDataByLevel}\n        rootCategory={rootCategory}\n      />\n    </div>\n  );\n}\n","import React, { useRef } from \"react\";\nimport TextField from \"calcite-react/TextField\";\nimport Button, { ButtonGroup } from \"calcite-react/Button\";\nimport { FormControl } from \"calcite-react/Form\";\n\nexport default function LinkPanel({ currentUrl }) {\n  const textInput = useRef(null);\n\n  function copyText() {\n    textInput.current.select();\n    document.execCommand(\"copy\");\n  }\n  return (\n    <div className=\"LinkPanel\">\n      <FormControl fullWidth success style={{ margin: \"0px\" }}>\n        <TextField\n          ref={textInput}\n          value={currentUrl}\n          fullWidth\n          clear\n          readonly\n          rightAdornmentNoWrap\n          aria-label=\"Application URL - copy this into a new tab to view full screen\"\n          rightAdornment={\n            <ButtonGroup>\n              <Button\n                onClick={() => {\n                  copyText();\n                }}\n              >\n                Copy\n              </Button>\n              <Button href={currentUrl} target=\"_blank\">\n                Open\n              </Button>\n            </ButtonGroup>\n          }\n        ></TextField>\n      </FormControl>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport T, { TabNav, TabTitle } from \"calcite-react/Tabs\";\nimport LinkPanel from \"./LinkPanel.js\";\n\nexport default function Tabs({ currentContent, noPanelMessage }) {\n  const [activeTabIndex, setActiveTabIndex] = useState(0);\n\n  // when the content changes - set active tab to 0\n  // (to prevent trying to render the third tab if only 2 tabs exist)\n  useEffect(() => {\n    setActiveTabIndex(0);\n  }, [currentContent]);\n\n  // Gets called when a tab changes (via click generally)\n  const onTabChange = (index) => {\n    setActiveTabIndex(index);\n  };\n\n  return (\n    <div className=\"Tabs\">\n      <T\n        className=\"TabsHeaders\"\n        onTabChange={onTabChange}\n        activeTabIndex={activeTabIndex}\n      >\n        <TabNav>\n          {currentContent &&\n            currentContent.map((contentInfo, i) => {\n              return <TabTitle key={i}>{contentInfo.title}</TabTitle>;\n            })}\n        </TabNav>\n      </T>\n      <div className=\"iframeWrapper\">\n        {/* If we have a valid URL and it's HTTPS, show the iframe: */}\n        {currentContent &&\n          currentContent[activeTabIndex] &&\n          currentContent[activeTabIndex].url &&\n          currentContent[activeTabIndex].url.startsWith(\"https\") && (\n            // <span>{currentContent && currentContent[activeTabIndex].url}</span>\n            <iframe\n              className=\"mainIframe\"\n              src={currentContent && currentContent[activeTabIndex].url}\n              title={currentContent && currentContent[activeTabIndex].title}\n            ></iframe>\n          )}\n        {/* If we have a valid URL but NOT HTTPS, show a message: */}\n        {currentContent &&\n          currentContent[activeTabIndex] &&\n          currentContent[activeTabIndex].url &&\n          !currentContent[activeTabIndex].url.startsWith(\"https\") && (\n            <div className=\"noPanelMessage\">\n              Please use the 'open' button at the bottom right to view this item\n              in a new browser tab...\n            </div>\n          )}\n        {/* If no valid URL, show a message: */}\n        {!(\n          currentContent &&\n          currentContent[activeTabIndex] &&\n          currentContent[activeTabIndex].url\n        ) && <div className=\"noPanelMessage\">{noPanelMessage}</div>}\n      </div>\n      {currentContent &&\n        currentContent[activeTabIndex] &&\n        currentContent[activeTabIndex].url && (\n          <LinkPanel\n            currentUrl={currentContent && currentContent[activeTabIndex].url}\n          ></LinkPanel>\n        )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport Tabs from \"./Tabs.js\";\n\nexport default function MainArea({ currentContent, noPanelMessage }) {\n  return (\n    <div className=\"MainArea\">\n      <Tabs\n        currentContent={currentContent}\n        noPanelMessage={noPanelMessage}\n      ></Tabs>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport CalciteModal from \"calcite-react/Modal\";\nimport { CalciteP } from \"calcite-react/Elements\";\nimport Button from \"calcite-react/Button\";\nimport { useCookies } from \"react-cookie\";\n\nexport default function Modal({ title, content }) {\n  const [open, setOpen] = useState(false);\n  const [cookies, setCookie] = useCookies([\"seen-modal\"]);\n\n  useEffect(() => {\n    if (!cookies.hasOwnProperty(\"seen-modal\")) {\n      setOpen(true);\n    }\n  }, [cookies]);\n\n  function closeModal() {\n    setCookie(\"seen-modal\", \"true\");\n    setOpen(false);\n  }\n  return (\n    <CalciteModal\n      open={open}\n      onRequestClose={closeModal}\n      appElement={document.body}\n      overlayStyle={{ position: \"absolute\" }}\n      title={title}\n      actions={[\n        <Button key=\"ok\" onClick={closeModal}>\n          Okay\n        </Button>,\n      ]}\n    >\n      <CalciteP>{content}</CalciteP>\n    </CalciteModal>\n  );\n}\n","// import { searchGroups } from \"@esri/arcgis-rest-portal\";\nimport { request } from \"@esri/arcgis-rest-request\";\n// import { searchGroups } from \"@esri/arcgis-rest-portal\";\n\nconst getGroupCategorySchema = async (portalUrl, groupId) => {\n  return new Promise((resolve, reject) => {\n    request(\n      `${portalUrl}/sharing/rest/community/groups/${groupId}/categorySchema`,\n      {\n        params: { f: \"json\" },\n      }\n    ).then(\n      (res) => {\n        resolve(res.categorySchema);\n      },\n      (err) => {\n        reject(err);\n      }\n    );\n  });\n};\n\nconst getGroupCategoryCounts = async (portalUrl, groupId) => {\n  return new Promise((resolve, reject) => {\n    request(`${portalUrl}/sharing/rest/content/groups/${groupId}/search`, {\n      params: { f: \"json\", countFields: \"groupCategories\", countSize: 200 },\n    }).then(\n      (res) => {\n        resolve(res);\n      },\n      (err) => {\n        reject(err);\n      }\n    );\n  });\n};\n\nconst _groupSearch = async (portalUrl, groupId, params) => {\n  console.log(\"_groupSearch\", params);\n  return new Promise((resolve, reject) => {\n    request(`${portalUrl}/sharing/rest/content/groups/${groupId}/search`, {\n      params,\n    }).then(\n      (res) => {\n        resolve(res);\n      },\n      (err) => {\n        reject(err);\n      }\n    );\n  });\n};\n\nconst groupSearch = async (portalUrl, groupId, params) => {\n  return new Promise(async (resolve, reject) => {\n    let nextStart = 0;\n    let allResults = [];\n\n    // Page through all results\n    while (nextStart != -1) {\n      const res = await _groupSearch(\n        portalUrl,\n        groupId,\n        Object.assign(\n          {\n            start: nextStart,\n          },\n          params\n        )\n      );\n      allResults = allResults.concat(res.results);\n      nextStart = res.nextStart;\n    }\n    resolve(allResults);\n  });\n};\n\nconst getCategorySchemaCounts = (categorySchemaCounts, category) => {\n  const categorySchemaCountInfo = categorySchemaCounts.find(\n    (schemaCountInfo) => {\n      return schemaCountInfo.value === category.toLowerCase();\n    }\n  );\n  return categorySchemaCountInfo ? categorySchemaCountInfo.count : 0;\n};\n\n/**\n * Recursively adds \"category\" (string - name) \"count\", and \"parent\" to each category that is a child of this category.\n * @param {object} rootCategory The currently working on category\n * @param {object} categorySchemaCounts The flat object containing counts for each category\n * @param {object} parentCategory The parent category of this one.\n */\nconst enrichCounts = (rootCategory, categorySchemaCounts, parentCategory) => {\n  if (parentCategory) {\n    rootCategory.category = `${parentCategory.category}/${rootCategory.title}`;\n  }\n  rootCategory.count = getCategorySchemaCounts(\n    categorySchemaCounts,\n    rootCategory.category\n  );\n  rootCategory.parent = parentCategory;\n\n  if (rootCategory.categories && rootCategory.categories.length > 0) {\n    rootCategory.categories.forEach((cat) => {\n      enrichCounts(cat, categorySchemaCounts, rootCategory);\n    });\n  } else {\n    return true;\n  }\n};\n\n/**\n * Recursive function that separates each category in the tree into separate\n * arrays based on what the node's depth in the tree is.\n *\n * @param {object} rootCategory Category object currently working on\n */\nconst getCategoriesAtLevels = (rootCategory) => {\n  let levelsArray = [];\n\n  // Recursive function - only used here, and defined here so it can access\n  // \"levelsArray\" variable\n  const getCategoriesAtLevelsRet = (rootCategory, level) => {\n    if (level >= levelsArray.length) {\n      levelsArray.push([]);\n    }\n\n    if (!rootCategory.categories || rootCategory.categories.length === 0) {\n      levelsArray[level].push(rootCategory);\n      return;\n    }\n\n    levelsArray[level].push(rootCategory);\n\n    // for all the child categories, call this function recursively:\n    rootCategory.categories.forEach((cat) => {\n      getCategoriesAtLevelsRet(cat, level + 1);\n    });\n  };\n\n  // Kick off the recursive process:\n  getCategoriesAtLevelsRet(rootCategory, 0);\n  return levelsArray;\n};\n\n/**\n * Adds the \"filters\" property to each layer in the layerInfosConfig\n *\n * @param {object} layerInfosConfig\n * @param {object} rootCategory\n */\nconst addFilters = (layerInfosConfig, categoriesSortedByLevel) => {\n  // const categoriesSortedByLevel = getCategoriesAtLevels(rootCategory);\n\n  layerInfosConfig.forEach((layerInfoConfig, i) => {\n    // Go through each level, creating a \"filter\" for each layer:\n    if (categoriesSortedByLevel[i + 1]) {\n      const filterSections = categoriesSortedByLevel[i + 1]\n        .filter((cat) => {\n          // filter out categories that do not have any apps (count=0):\n          return cat.count > 0;\n        })\n        .map((cat) => {\n          // We have to do a compound filter (EX: STATE_NAME = 'Missouri' AND NAME='Jasper County') because\n          // what if 'Jasper County' exists in other states?\n          // For this reason we have the following logic. Use the \"parentNameAttribute\" from the config,\n          // which represents the name of the attribute in the CURRENT LAYER that can be matched against the\n          // NAME of the PARENT layer. (sorry, this is a bit confusing, but it's a complex relationship so necessary :[\n          if (layerInfosConfig[i - 1] && layerInfoConfig.parentNameAttribute) {\n            return `${layerInfoConfig.parentNameAttribute} = '${cat.parent.title}' AND ${layerInfoConfig.nameAttribute} = '${cat.title}'`;\n          } else {\n            return `${layerInfoConfig.nameAttribute} = '${cat.title}'`;\n          }\n        });\n\n      layerInfoConfig.filter = `(${filterSections.join(\") OR (\")})`;\n    }\n  });\n};\n\nconst getInitialAppData = async function (\n  portalUrl,\n  groupId,\n  rootCategoryPathString\n) {\n  try {\n    // Get group category counts:\n    const groupCategoryCounts = await getGroupCategoryCounts(\n      portalUrl,\n      groupId\n    );\n\n    const categorySchemaCounts = groupCategoryCounts.aggregations.counts[0].fieldValues.filter(\n      (schemaCountInfo) => {\n        return schemaCountInfo.value.startsWith(\n          rootCategoryPathString.toLowerCase()\n        );\n      }\n    );\n\n    // Category Schema:\n    const categorySchema = await getGroupCategorySchema(portalUrl, groupId);\n\n    // Endpoint gives back array of categorySchemas - make sure we only have 1\n    if (categorySchema.length === 1) {\n      // Filter the categories to the the US category\n      const RootCategory = categorySchema[0].categories.find((categoryInfo) => {\n        return (\n          categoryInfo.title ===\n          categoryPathStringToName(rootCategoryPathString)\n        );\n      });\n\n      // add the \"name\" onto the root category so our recursive function (enrich)\n      // will work, then call enrich to update all the categories in the tree.\n      RootCategory.category = rootCategoryPathString;\n      enrichCounts(RootCategory, categorySchemaCounts, false);\n      // enrichFilters(RootCategory);\n\n      return RootCategory;\n    } else {\n      throw new Error(\"Got wrong number of category schemas.\");\n    }\n  } catch (e) {\n    throw new Error(\"Error getInitialAppData\");\n  }\n};\n\nconst categoryPathStringToName = function (categoryPathString) {\n  const location = categoryPathString.lastIndexOf(\"/\") + 1;\n  return categoryPathString.substr(location);\n};\n\nconst getPortalUrl = function (resource) {\n  return resource.portal\n    ? resource.portal.urlKey\n      ? `https://${resource.portal.urlKey}.${resource.portal.customBaseUrl}`\n      : resource.portal.url\n    : \"https://www.arcgis.com\";\n};\n\nconst _getItemSortOrder = function (item) {\n  const orderCat = item.groupCategories.find((cat) => cat.includes(\"/Order/\"));\n  if (orderCat) {\n    return Number(orderCat.slice(orderCat.lastIndexOf(\"/\") + 1));\n  } else {\n    return 999;\n  }\n};\n\nconst getGroupCategoryContent = function (\n  portalUrl,\n  groupId,\n  excludedItemTypes,\n  excludedItemIDs,\n  category\n) {\n  console.log(\"getGroupCategoryContent\");\n  return new Promise((resolve, reject) => {\n    groupSearch(portalUrl, groupId, {\n      categories: category,\n      num: 100, // the maximum possible\n    }).then(\n      (queryResponse) => {\n        console.log(\"queryResponse\", queryResponse);\n        // Filter the results (logic from John G):\n        const groupCategoryItems = queryResponse\n          .filter((item) => {\n            return (\n              !excludedItemTypes.includes(item.type) &&\n              !excludedItemIDs.includes(item.id)\n            );\n          })\n          .filter((item) => {\n            return item.groupCategories.find((cat) => cat === category);\n          });\n\n        // Sort the items (this will be the order of the tabs) based on Portal order\n        groupCategoryItems.sort((a, b) => {\n          return _getItemSortOrder(a) - _getItemSortOrder(b);\n        });\n\n        // fix url issues:\n        groupCategoryItems.forEach((item) => {\n          if (item.type === \"Web Experience\") {\n            item.url = `https://experience.arcgis.com/experience/${item.id}`;\n          } else if (item.type === \"Dashboard\") {\n            item.url = `${getPortalUrl(item)}/apps/opsdashboard/index.html#/${\n              item.id\n            }`;\n          }\n        });\n        resolve(groupCategoryItems);\n      },\n      (err) => {\n        reject(err);\n      }\n    );\n  });\n};\n\n/**\n * Recursively look through the categoryData tree for \"name\" and return the category.\n * @param {object} categoryData\n * @param {string} name\n */\nconst findCategory = function (categoryData, name) {\n  if (categoryData.category === name) {\n    return categoryData;\n  } else if (\n    categoryData.hasOwnProperty(\"categories\") &&\n    categoryData.categories.length > 0\n  ) {\n    let result = null;\n    for (let i = 0; result == null && i < categoryData.categories.length; i++) {\n      result = findCategory(categoryData.categories[i], name);\n    }\n    return result;\n  } else {\n    return null;\n  }\n};\n\nexport {\n  getInitialAppData,\n  groupSearch,\n  getGroupCategoryContent,\n  findCategory,\n  addFilters,\n  getCategoriesAtLevels,\n};\n","import React, { useState, useEffect } from \"react\";\n// import logo from \"./logo.svg\";\nimport Sidebar from \"./sidebar/Sidebar.js\";\nimport MainArea from \"./mainArea/MainArea.js\";\nimport Modal from \"./Modal.js\";\nimport \"./Split.scss\";\nimport \"./App.scss\";\nimport Split from \"react-split\";\nimport {\n  getInitialAppData,\n  getGroupCategoryContent,\n  findCategory,\n  addFilters,\n  getCategoriesAtLevels,\n} from \"./utils/portalUtils.js\";\n\nfunction App({ application, applicationBase }) {\n  const [categoryData, setCategoryData] = useState();\n  const [categoryDataByLevel, setCategoryDataByLevel] = useState();\n  const [currentCategory, setCurrentCategory] = useState();\n  const [currentContent, setCurrentContent] = useState();\n\n  useEffect(() => {\n    // Prepare data that we need\n    getInitialAppData(\n      application.portalUrl,\n      application.group,\n      application.customConfig.rootCategory\n    ).then(\n      (res) => {\n        const _categoryDataByLevel = getCategoriesAtLevels(res);\n        setCategoryDataByLevel(_categoryDataByLevel);\n\n        addFilters(application.customConfig.layerInfos, _categoryDataByLevel);\n        setCategoryData(res);\n        setCurrentCategory(res);\n        onCurrentCategoryChange(res);\n      },\n      (err) => {\n        console.error(\"Error getting initial data\");\n      }\n    );\n  }, []); // eslint-disable-line\n\n  function onCurrentCategoryChange(e) {\n    getGroupCategoryContent(\n      application.portalUrl,\n      application.group,\n      application.customConfig.excludedItemTypes,\n      application.customConfig.excludedItemIDs,\n      e.category\n    ).then(\n      (groupContent) => {\n        setCurrentContent(groupContent);\n        setCurrentCategory(e);\n      },\n      (err) => {\n        console.log(\"error getting group content\");\n        console.error(err);\n      }\n    );\n  }\n\n  // In the map we only have the category name, so allow selecting just by that.\n  function onCurrentCategoryChangeByName(name) {\n    const categoryObject = findCategory(categoryData, name);\n    onCurrentCategoryChange(categoryObject);\n  }\n\n  let contents;\n\n  if (categoryData) {\n    contents = (\n      <Split\n        className=\"App\"\n        sizes={[25, 75]}\n        minSize={100}\n        expandToMin={false}\n        gutterSize={10}\n        direction=\"horizontal\"\n        cursor=\"col-resize\"\n      >\n        <div className=\"split\">\n          <Modal\n            title={application.title}\n            content={application.customConfig.initialModalMessage}\n          />\n          <Sidebar\n            title={application.title}\n            portalUrl={application.portalUrl}\n            webmap={application.webmap}\n            currentCategory={currentCategory}\n            onCurrentCategoryChange={onCurrentCategoryChange}\n            onCurrentCategoryChangeByName={onCurrentCategoryChangeByName}\n            layerInfosConfig={application.customConfig.layerInfos}\n            categoryDataByLevel={categoryDataByLevel}\n            emptyListMessage={application.customConfig.emptyListMessage}\n            showFilterInList={application.customConfig.showFilterInList}\n            rootCategory={application.customConfig.rootCategory}\n          />\n        </div>\n        <div className=\"split\">\n          <MainArea\n            currentContent={currentContent}\n            noPanelMessage={application.customConfig.noPanelMessage}\n          />\n        </div>\n      </Split>\n    );\n  } else {\n    contents = <div className=\"LoadingDiv\">Loading ...</div>;\n  }\n\n  return contents;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"react-app-polyfill/ie11\";\nimport \"react-app-polyfill/stable\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { setDefaultOptions } from \"esri-loader\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport CalciteThemeProvider from \"calcite-react/CalciteThemeProvider\";\nimport { Helmet } from \"react-helmet\";\n\n// for all Esri maps, load the css:\nsetDefaultOptions({ css: true });\n\n// We want this app to conform to the \"ArcGIS Template Application\" pattern\n// (https://github.com/Esri/application-base-js)\n// so we must first DYNAMICALLY (this is the pattern) grab the configuration\n// JSON values before starting up the application.\nPromise.all([\n  fetch(\"./config/application.json\"),\n  fetch(\"./config/applicationBase.json\")\n])\n  .then(function(responses) {\n    // Get a JSON object from each of the responses\n    return Promise.all(\n      responses.map(function(response) {\n        return response.json();\n      })\n    );\n  })\n  .then(function(data) {\n    // We have the config files, startup React.\n    const application = data[0];\n    const applicationBase = data[1];\n    ReactDOM.render(\n      <React.Fragment>\n        {/* React-Helmet sets the page title and meta: */}\n        <Helmet>\n          <meta charSet=\"utf-8\" />\n          <title>{application.title}</title>\n        </Helmet>\n        {/* Enable Esri Calcite-React: */}\n        <CalciteThemeProvider>\n          {/* Start the app, passing in the config files we've loaded: */}\n          <App application={application} applicationBase={applicationBase} />\n        </CalciteThemeProvider>\n      </React.Fragment>,\n      document.getElementById(\"root\")\n    );\n  })\n  .catch(function(error) {\n    // if there's an error, log it\n    console.error(\"Error - could not get configuration variables.\");\n    console.error(error);\n  });\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}